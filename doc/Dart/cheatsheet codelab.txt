# String interpolation: (Nội suy String):
String	 			Result
'${3 + 2}'	 		'5'
'${"word".toUpperCase()}'	'WORD'
'$myObject'	 		The value of myObject.toString()

# Nullable variables
int? a; // Gán giá trị ban đầu null, cho phép có thể rỗng

# Null-aware operators (Nhận biết null)
int? a; // = null
a ??= 3; // a null => a=3
print(a); // <-- Prints 3

a ??= 5; // a !null => a=3
print(a); // <-- Still prints 3.

print(1 ?? 3); // <-- Prints 1.
print(null ?? 12); // <-- Prints 12.

# Conditional property access (Kiểm tra truy cập của property)
myObject?.someProperty?.someMethod()

# Collection literals: lists, maps, and sets
final aListOfInts = <int>[];
final aSetOfInts = <int>{};
final aMapOfIntToDouble = <int, double>{};

# Arrow syntax: () => {}

# Cascades: thác nước ..
! null-shorting cascade (?..)
querySelector('#confirm')
  ?..text = 'Confirm'
  ..classes.add('important')
  ..onClick.listen((e) => window.alert('Confirmed!'))
  ..scrollIntoView();

# Getters and setters
class MyClass {
  int _aProperty = 0;

  int get aProperty => _aProperty;

  set aProperty(int value) {
    if (value >= 0) {
      _aProperty = value;
    }
  }
}

# Optional positional parameters (Vị trí tùy chọn)
int sumUp(int a, int b, int c)
int sumUpToFive(int a, [int? b, int? c, int? d, int? e])

sumUpToFive(1)
sumUpToFive(1, 2, 3, 4);

# Named parameters
void printName(String firstName, String lastName, {String? middleName}) {
    print('$firstName ${middleName ?? ''} $lastName');
  }
// ···
  printName('Dash', 'Dartisan');
  printName('John', 'Smith', middleName: 'Who');
  // Named arguments can be placed anywhere in the argument list
  printName('John', middleName: 'Who', 'Smith');

# Exceptions: try, on, and catch
throw Exception('Something bad happened.');
throw 'Waaaaaaah!';

# Using this in a constructor
class MyColor {
  int red;
  int green;
  int blue;

  MyColor(this.red, this.green, this.blue);
}

final color = MyColor(80, 80, 128);

# Initializer lists
FirstTwoLetters(String word)
        : assert(word.length >= 2),
          letterOne = word[0],
          letterTwo = word[1];

# Named constructors
class Point {
  double x, y;

  Point(this.x, this.y);

  Point.origin()
      : x = 0,
        y = 0;
}

# Factory constructors
factory IntegerHolder.fromList(List<int> list) {
      if (list.length == 1) {
        return IntegerSingle(list[0]);
      } else if (list.length == 2) {
        return IntegerDouble(list[0], list[1]);
      } else if (list.length == 3) {
        return IntegerTriple(list[0], list[1], list[2]);
      } else {
        throw Error();
      } 
    }

# Redirecting constructors: chuyển hướng đến hàm khac (:)
 Automobile.hybrid(String make, String model) : this(make, model, 60);

# Const constructors